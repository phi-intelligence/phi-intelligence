# ========================================
# Updated Docker Compose for Current Codebase
# ========================================

services:
  # ========================================
  # Phi Intelligence Container (Frontend + Backend) - Key Vault Enabled
  # ========================================
  phi_intelligence:
    build: 
      context: ./phi_intelligence
      dockerfile: Dockerfile
    container_name: phi_intelligence
    ports:
      - "5000:5000"
    environment:
      # Azure Key Vault Configuration
      - AZURE_KEY_VAULT_URL=https://phi-intelligence-vault.vault.azure.net/
      - AZURE_TENANT_ID=48d9c583-6ecc-4c11-a457-41e40ade8d37
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Application Configuration
      - NODE_ENV=production
      - PORT=5000
      - REDIS_URL=redis://redis:6379
      
      # Non-sensitive configuration
      - VITE_ALLOWED_ORIGINS=https://phiintelligence.com,https://www.phiintelligence.com
      - VITE_PHI_TOKEN_SERVER_URL=https://phiintelligence.com:8001
      - VITE_COMPANY_TOKEN_SERVER_URL=https://phiintelligence.com:8002
    volumes:
      - phi_intelligence_uploads:/app/uploads
      - phi_intelligence_logs:/app/logs
      - /etc/ssl/phiintelligence:/etc/ssl/phiintelligence:ro
    networks:
      - phi_network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('https').get('https://localhost:5000/health', {rejectUnauthorized: false}, (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # Phi Token Server (General AI) - Key Vault Enabled
  # ========================================
  phi_token_server:
    build: 
      context: ./phi_voice/token_servers/phi_token_server
      dockerfile: Dockerfile
    container_name: phi_token_server
    ports:
      - "8001:8001"
    environment:
      # Azure Key Vault Configuration
      - AZURE_KEY_VAULT_URL=https://phi-intelligence-vault.vault.azure.net/
      - AZURE_TENANT_ID=48d9c583-6ecc-4c11-a457-41e40ade8d37
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Application Configuration
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    volumes:
      - phi_voice_logs:/app/logs
    networks:
      - phi_network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # Company Token Server (RAG AI) - Key Vault Enabled
  # ========================================
  company_token_server:
    build: 
      context: ./phi_voice/token_servers/company_token_server
      dockerfile: Dockerfile
    container_name: company_token_server
    ports:
      - "8002:8002"
    environment:
      # Azure Key Vault Configuration
      - AZURE_KEY_VAULT_URL=https://phi-intelligence-vault.vault.azure.net/
      - AZURE_TENANT_ID=48d9c583-6ecc-4c11-a457-41e40ade8d37
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Application Configuration
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    volumes:
      - phi_voice_storage:/app/storage
      - phi_voice_logs:/app/logs
    networks:
      - phi_network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # Hotel Token Server (Custom Voice Agent)
  # ========================================
  hotel_token_server:
    build: 
      context: ./phi_voice/token_servers/hotel_token_server
      dockerfile: Dockerfile
    container_name: hotel_token_server
    ports:
      - "8004:8004"
    environment:
      # Azure Key Vault Configuration
      - AZURE_KEY_VAULT_URL=https://phi-intelligence-vault.vault.azure.net/
      - AZURE_TENANT_ID=48d9c583-6ecc-4c11-a457-41e40ade8d37
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Application Configuration
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    volumes:
      - phi_voice_logs:/app/logs
    networks:
      - phi_network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8004/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # Restaurant Token Server (Custom Voice Agent)
  # ========================================
  restaurant_token_server:
    build: 
      context: ./phi_voice/token_servers/restaurant_token_server
      dockerfile: Dockerfile
    container_name: restaurant_token_server
    ports:
      - "8005:8005"
    environment:
      # Azure Key Vault Configuration
      - AZURE_KEY_VAULT_URL=https://phi-intelligence-vault.vault.azure.net/
      - AZURE_TENANT_ID=48d9c583-6ecc-4c11-a457-41e40ade8d37
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Application Configuration
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    volumes:
      - phi_voice_logs:/app/logs
    networks:
      - phi_network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8005/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # Hospital Token Server (Custom Voice Agent)
  # ========================================
  hospital_token_server:
    build: 
      context: ./phi_voice/token_servers/hospital_token_server
      dockerfile: Dockerfile
    container_name: hospital_token_server
    ports:
      - "8006:8006"
    environment:
      # Azure Key Vault Configuration
      - AZURE_KEY_VAULT_URL=https://phi-intelligence-vault.vault.azure.net/
      - AZURE_TENANT_ID=48d9c583-6ecc-4c11-a457-41e40ade8d37
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Application Configuration
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    volumes:
      - phi_voice_logs:/app/logs
    networks:
      - phi_network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8006/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # Redis Service (Shared Cache & Session Storage)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: phi_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./phi_voice/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - phi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - REDIS_REPLICATION_MODE=master

  # ========================================
  # Redis Commander (Optional - Redis Web UI)
  # ========================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: phi_redis_commander
    ports:
      - "8080:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-phi_voice_2024}
    networks:
      - phi_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - monitoring

  # ========================================
  # Nginx Reverse Proxy (Production)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: phi_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl/phiintelligence:/etc/ssl/phiintelligence:ro
      - nginx_logs:/var/log/nginx
    networks:
      - phi_network
    depends_on:
      - phi_intelligence
      - phi_token_server
      - company_token_server
      - hotel_token_server
      - restaurant_token_server
      - hospital_token_server
    restart: unless-stopped

# ========================================
# Volumes for Data Persistence
# ========================================
volumes:
  # Phi Intelligence volumes
  phi_intelligence_uploads:
    driver: local
  phi_intelligence_logs:
    driver: local
  
  # Phi Voice volumes
  phi_voice_storage:
    driver: local
  phi_voice_logs:
    driver: local
  
  # Redis volumes
  redis_data:
    driver: local
  
  # Nginx volumes
  nginx_logs:
    driver: local

# ========================================
# Networks for Service Communication
# ========================================
networks:
  phi_network:
    driver: bridge
    name: phi_network
    ipam:
      config:
        - subnet: 172.20.0.0/16